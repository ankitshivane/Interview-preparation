

-------------------------------

DXC technology
1. explain me project flow for ui, backend etc?
2. how you are utilizing apache kafka in your project?
3. difference between Arraylist and LinkedList
4. what is circular dependency and how to resolve them?
5. explain spring boot application lifecycle
6. what are the different annotations used in project?
7. what is SOLID principle and how you have used?
8. what is predicate and Function interface
9. what is optional keyword and how to write it?
10. what is stream in java 8?
11. what are the different types of garbage collectors and how many ways we can make eligible java object can be garbage collected?
12. what are the different ways to create java object?
13. What is serialization and deserialization in java ?


CODING questions
Streams
1. from an Employee class containing name,age,salary etc. sort a list of employees based on name first and then age
	List<Employee> el = new ArrayList<>();
//	el.stream().sorted(Comparator.comparing(Employee::getName)).thenComparing(Employee::getAge).collect(Collectors.toList());
		

2. from a String find out missing character ?
String s = "I am a software engineer";
		Set<Character> missingChar = IntStream.range('a', 'z' + 1).mapToObj(c -> (char) c).collect(Collectors.toSet())
				.stream().filter(ch -> !s.toLowerCase().contains(String.valueOf(ch))).collect(Collectors.toSet());
		if (!missingChar.isEmpty()) {
			for (Character character : missingChar) {
//				System.out.print(character+" ");
			}
		}
3. 

Length of the longest substring without repeating characters
Example 1:
Input: “ABCDEFGABEF”
Output: 7
Explanation: The longest substring without repeating characters are “ABCDEFG”, “BCDEFGA”, and “CDEFGAB” with lengths of 7
 
Example 2:
Input: “GEEKSFORGEEKS”
Output: 7
Explanation: The longest substrings without repeating characters are “EKSFORG” and “KSFORGE”, with lengths of 7

answer:
public static int lengthOfLongestSub(String input) {
		int n = input.length();
		int res = 0;
		int i = 0, j = 0;
		Set<Character> charSet = new HashSet<>();
		while (i < n && j < n) {
			charSet.add(input.charAt(j));
			j++;

			while (charSet.contains(input.charAt(i))) {
				charSet.remove(input.charAt(i));
				i++;
			}
			res = Math.max(res, j - i);
		}
		return res;
	}
