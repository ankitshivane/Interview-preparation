1. can we create our own marker interface ?
Answer:

Yes, you can create your own marker interface in Java. A marker interface is just like any other interface in Java, except it doesn't contain any methods 
or constants. Its purpose is to mark or tag classes that implement it, indicating certain characteristics or capabilities.

For example, let's say you want to create a marker interface called `MyMarkerInterface`:
```java
public interface MyMarkerInterface {
    // No methods or constants declared
}
```

Now, you can have classes implement this interface to signify that they possess a certain trait or characteristic represented by the marker interface.

```java
public class MyClass implements MyMarkerInterface {
    // Class implementation
}
```

The Java Virtual Machine (JVM) does not provide any specific functionality or behavior for marker interfaces. They are primarily used for identification
purposes within your own codebase or by external frameworks/libraries.

When a class implements a marker interface, it's up to your application or any frameworks/libraries you're using to interpret the presence of the marker 
interface and provide associated functionality. For example:

1. **Custom Logic:** You can define custom logic in your codebase that checks if a class implements your marker interface and performs certain actions based on that information.

2. **Framework/Library Usage:** Some frameworks or libraries may define marker interfaces and provide associated functionality or processing. For instance, an ORM (Object-Relational Mapping) framework might have a marker interface for entities, and it may use reflection to detect entities based on the marker interface during mapping operations.

In summary, while the JVM itself doesn't provide specific functionality for marker interfaces, they serve as a mechanism for categorization and identification
within your codebase or within the context of frameworks, libraries, or tools that you use. It's up to your application or the associated frameworks/libraries
to determine the behavior or functionality associated with marker interfaces.

------------------------------------------------------------------------------------------------------------------------------------------------------

2. internal working of concurrentHashmap in java?
Answer:

an explanation of the internal workings of `ConcurrentHashMap` in Java :

`ConcurrentHashMap` in Java is a thread-safe implementation of the `Map` interface, designed for concurrent access from multiple threads without the need for external synchronization. It provides high-performance concurrent operations for put, get, and other map operations while maintaining consistency and avoiding contention between threads.

### Internal Working of ConcurrentHashMap:

1. **Segmentation:**
   - `ConcurrentHashMap` internally uses a concept called segmentation or partitioning to achieve concurrency.
   - It divides the underlying data structure into several segments (also known as hash buckets or partitions), each managed by its own lock.
   - The number of segments is determined by the concurrency level specified during `ConcurrentHashMap` construction (default is 16).

2. **Segment Array:**
   - Internally, `ConcurrentHashMap` maintains an array of segments (`Segment<K, V>[]`) to hold the key-value pairs.
   - Each segment is a separate hash table (similar to a regular `HashMap`) and implements its own locking mechanism.

3. **Hashing and Segment Selection:**
   - When a key-value pair is added or accessed, the key's hash code is used to determine the segment in which the entry should be placed or accessed.
   - The hash code is mapped to a segment using bitwise operations (`hash & (segments.length - 1)`).

4. **Concurrent Operations:**
   - Concurrent read operations (e.g., `get`) can occur simultaneously on different segments without blocking each other.
   - Write operations (e.g., `put`, `remove`) that modify the map require acquiring a lock on the specific segment in which the operation is performed.
   - Locking at the segment level allows multiple threads to perform read operations concurrently while ensuring thread safety for write operations within a segment.

5. **Segment-Level Locking:**
   - Each segment in `ConcurrentHashMap` is guarded by a separate lock (reentrant lock or striped lock) to allow concurrent writes within different segments.
   - Lock contention is reduced because threads contending for entries in different segments don't block each other.

6. **Updates and Rehashing:**
   - When updating the map (e.g., adding or removing entries), only the affected segment's lock is acquired, minimizing contention and allowing concurrent updates in different segments.
   - Periodically, as the map grows or shrinks, `ConcurrentHashMap` performs rehashing operations on individual segments, not the entire map, reducing the scope of locking during rehashing.

### Advantages of ConcurrentHashMap:

1. **Concurrency:** Supports high concurrent read and write operations without blocking.
2. **Performance:** Provides efficient concurrent operations by partitioning the data structure and using segment-level locking.
3. **Scalability:** Scales well with increased concurrency levels and the number of threads accessing the map.
4. **Thread Safety:** Ensures thread safety for updates while allowing concurrent reads across different segments.
5. **Reduced Contention:** Minimizes lock contention by isolating locks to specific segments, reducing the likelihood of thread contention.

In summary, `ConcurrentHashMap` achieves thread safety and high concurrency by partitioning its internal data structure into segments, using segment-level locking, and allowing concurrent read and write operations across different segments. This design balances thread safety with performance, making it suitable for concurrent applications where multiple threads access and modify a shared map concurrently.

Example:

import java.util.concurrent.ConcurrentHashMap;

public class ConcurrentHashMapExample {
    public static void main(String[] args) {
        // Create a ConcurrentHashMap with an initial capacity of 16 and a concurrency level of 4
        ConcurrentHashMap<Integer, String> concurrentMap = new ConcurrentHashMap<>(16, 0.75f, 4);

        // Adding elements to the ConcurrentHashMap
        concurrentMap.put(1, "One");
        concurrentMap.put(2, "Two");
        concurrentMap.put(3, "Three");

        // Displaying the ConcurrentHashMap
        System.out.println("ConcurrentHashMap before modification: " + concurrentMap);

        // Updating an existing value
        concurrentMap.put(2, "UpdatedTwo");

        // Adding a new element
        concurrentMap.put(4, "Four");

        // Removing an element
        concurrentMap.remove(3);

        // Displaying the modified ConcurrentHashMap
        System.out.println("ConcurrentHashMap after modification: " + concurrentMap);

        // Accessing a value
        String value = concurrentMap.get(1);
        System.out.println("Value associated with key 1: " + value);
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------
3. what is classpath in java? how to set in spring boot application? 
Anawer:
In Java, the classpath is a parameter—set either on the command-line or via an environment variable—that tells the Java Virtual Machine (JVM) and Java compiler (javac) where to find the user-defined classes and packages. Essentially, it is a list of directories, JAR files, and ZIP files that the JVM searches for the classes needed to run a Java program.

Command-Line Argument: Using the -cp or -classpath option when running the java or javac commands.
cmd:
java -cp mylib.jar:classes:. com.example.MainClass

In Spring Boot applications, setting the classpath is typically handled by the build tools (such as Maven or Gradle) and the Spring Boot framework itself. This greatly simplifies the development process, allowing you to focus on writing code rather than managing the classpath manually.


------------------------------------------------------------------------------------------------------------------------------------------------------
4. what are rhe different changes happened in collection framework as part of java 8?
Answer:
Java 8 introduced the following major changes to the collections framework:

Streams API: For functional-style operations on collections.
Default Methods: In interfaces to add new functionality without breaking existing code.
New Collection Methods: Such as forEach, removeIf, stream, and parallelStream.
Enhanced Map Interface: With methods like forEach, getOrDefault, putIfAbsent, compute, and merge.
Optional Class: To handle null values more gracefully.
Collectors Utility Class: For accumulating elements of a stream into collections or other results.
These enhancements made it easier to perform complex data manipulations, handle nulls safely, and process data in a more functional and parallelizable way.
------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
